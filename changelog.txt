0.2.0
  * Added `asBinary` support for times. All field types now allow conversion to `seq[byte]`.
  * Added `tryData` for `SQLResults`, allowing speculatively fetching values without raising an error if the field doesn't exist.
  * Added `fieldIndex`, `fields`, and `hasField` procs for `SQLResults`.
  * Added millisecond and microsecond population for time fields.
    Times now have microseconds and milliseconds populated and nanoseconds are appropriately truncated by default.
  * Added `distributeNanoseconds` to manually invoke sub-second field population from `nanoseconds` on a `TimeInterval`.
  * Added `stuffNanoseconds` to assemble the fractional part of a `TimeInterval` to nanoseconds.
  * Added `odbcRawTimes` compile-time switch to avoid populating milliseconds and microseconds or truncating nanoseconds.
    This leaves the entire sub-second fractional component represented in nanoseconds.
  * Added tests for `data`, `tryData`, `fieldIndex`, and `listDrivers`.
  * Exposed `SQLDriverAttribute`.
  * Deprecated `fromField` used with SQLResults, as it now does the same work as `data`.
  * `data` doesn't need `var SQLResults` any more.
  * Removed the internal variable `fieldNames`, a functional duplicate of `fieldnamesIndex` in SQLResults.
  * Tidied up the date time test, add option to only check times up to seconds precision.

0.1.3
  * Internal fixes for 1.0.

0.1.2
  * Removed `isNil` from strings.

  * Renamed `rawSqlType` to `sqlType`

0.1.1
  * Restructuring to match nimble's requirements, and also a bit of refactoring.

  * Note: This version changes how fields are stored!

    In version < 0.1.1 fields were stored as a pair with the data for each row and column.
    Now, fields are stored within the `SQLQuery` object, and are accessed via integer index using the `fields` proc.
  
  * Fixes to internal string allocations and processing.
